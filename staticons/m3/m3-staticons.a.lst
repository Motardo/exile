
MC680xx Assembler - Ver 3.4                                                                                26-Aug-20  Page   1
Copyright Apple Computer, Inc. 1984-1995

Loc   F Object Code     Addr  M	Source Statement

                               	; d3  $8(a6).w  pc
                               	; d4  dest
                               	; d5  right_limit
                               	; d6  name_width/i
                               	; d7  shift_value

                               	; -$02(a6) dest_rect.right
                               	; -$04(a6) dest_rect.bottom
                               	; -$06(a6) dest_rect.left
                               	; -$08(a6) dest_rect.top
                               	; -$98(a6) a1 source_rects
                               	; -$9c(a6) dlog_dest_rect.bottom
                               	; -$a0(a6) dlog_dest_rect.top
                               	; -$a6(a6) store_color

00000                          		MAIN
00000   0000 1D16              		org $1d16
01D16
01D16 G 7C00                   		clr.l	d6 			; i = 0
01D18   3003                   	Loop	move.w	d3,d0			; pc
01D1A   C1FC 073A              		muls.w	#$073a,d0		; adven[pc]
01D1E   0640 0060              		addi    #$60,d0			; status[0]
01D22   D046                   		add	d6,d0
01D24   D046                   		add	d6,d0			; add 2*i for ith status
01D26   45F9 0003 0FF8         		lea	$00030ff8,a2		; ADVEN
01D2C   D5C0                   		adda.l	d0,a2			; adven[pc].status[i]
01D2E   3052                   		movea.w	(a2),a0
01D30   2E08                   		move.l	a0,d7 			; status value
01D32   4A47                   		tst.w	d7
01D34   677A            01DB0  		beq.s	Next
01D36   6E1C            01D54  		bgt.s	CkMax
01D38   0C06 0001              		cmpi.b	#$01,d6
01D3C   670C            01D4A  		beq.s	CkMin
01D3E   0C06 0003              		cmpi.b	#$03,d6
01D42   6706            01D4A  		beq.s	CkMin
01D44   0C06 000B              		cmpi.b	#$0b,d6
01D48   6666            01DB0  		bne.s	Next
01D4A   0C47 FFF8              	CkMin	cmpi.w	#-$08,d7
01D4E   6E0E            01D5E  		bgt.s	Save
01D50   3E3C FFF8              		move.w	#-$08,d7
01D54   0C47 0008              	CkMax	cmpi.w	#$08,d7
01D58   6D04            01D5E  		blt.s	Save
01D5A   3E3C 0008              		move.w	#$08,d7
01D5E   CFFC 000C              	Save	muls.w	#$0c,d7			; shift_value = status[i] * 12
01D62   3F04                   		move.w	d4,-(a7) 		; dest
01D64   1F3C 0001              		move.b	#$01,-(a7) 		; mode
01D68   2F2E FFFC              		move.l	-$0004(a6),-(a7) 	; dest_rect.bottom
01D6C   2F2E FFF8              		move.l	-$0008(a6),-(a7) 	; dest_rect.top
01D70   2F39 0001 CD7A         		move.l	$0001cd7a,-(a7) 	; PC_STATS_GWORLD
01D76   3206                   		move.w	d6,d1			; i
01D78   E741                   		asl	#$03,d1			; i * 8
01D7A   43F6 1000              		lea	(a6,d1.w),a1		; a1 is frame pointer offset by i*8
01D7E   3029 FF6E              		move.w	-$0092(a1),d0		; source_rects[i].right
01D82   D047                   		add.w	d7,d0			; shift_value
01D84   3F00                   		move.w	d0,-(a7)		; source_rect[i].right + shift_value
01D86   3F29 FF6C              		move.w	-$0094(a1),-(a7) 	; source_rect[i].bottom
01D8A   0440 000C              		subi.w	#$0c,d0
01D8E   3F00                   		move.w	d0,-(a7)		; source_rect[i].left is 12 less than right
01D90   3F29 FF68              		move.w	-$0098(a1),-(a7) 	; source_rect[i*8].top
01D94   2F39 0001 CD76         		move.l	$0001cd76,-(a7) 	; MIXED
01D9A   4EB9 0000 401A         		jsr	($0000401a).l 		; RECT_DRAW_SOME_ITEM
01DA0   4FEF 001C              		lea	$001c(a7),a7
01DA4   066E 000D FFFA         		addi.w	#$000d,-$0006(a6)	; dest_rect.left += 13
01DAA   066E 000D FFFE         		addi.w	#$000d,-$0002(a6)	; dest_rect.right += 13
01DB0   BA6E FFFE              	Next	cmp.w	-$0002(a6),d5		; dest_rect.right < right_limit
01DB4   6D0A            01DC0  		blt.s	Return
01DB6   5246                   		addq	#$1,d6			; i++
01DB8   0C06 000E              		cmpi.b	#$0e,d6			; i < 14
01DBC   6D00 FF5A       01D18  		blt	Loop
01DC0   6000 043C       021FE  	Return	bra	Out			; *+$43e $21fe
01DC4
01DC4                          		ds.l 7
01DE0   0000 21FE              		org $21fe
021FE                          	Out

MC680xx Assembler - Ver 3.4                                                                                26-Aug-20  Page   2
Copyright Apple Computer, Inc. 1984-1995

Loc   F Object Code     Addr  M	Source Statement

021FE                          		END

Elapsed time: 0.01 seconds.

Assembly complete - no errors found.  75 lines.
